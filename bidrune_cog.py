# bidding_cog.py
import discord
from discord.ext import commands
from discord.ui import Button, View, Select
import asyncio
import time
import logging
import os # <<< ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå
from typing import Dict, List, Optional # ‡πÄ‡∏û‡∏¥‡πà‡∏° type hinting

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logger ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Cog ‡∏ô‡∏µ‡πâ
log = logging.getLogger(__name__)

# --- ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà ---
# ‡∏¢‡πâ‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏π‡∏ô‡∏°‡∏≤‡πÑ‡∏ß‡πâ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
BIDDING_RUNES: List[str] = [
    "Netherforce"
]
MAX_BIDS_PER_ITEM = 3 # <<< ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≠‡∏£‡∏π‡∏ô
# ID ‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏• (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏õ‡πá‡∏ô ID ‡∏ä‡πà‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)
BIDDING_CHANNEL_ID = 1387457247105515621 # <<< ‡πÉ‡∏™‡πà ID ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
GUIDE_FILENAME = "bidding_guide.txt" # <<< ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠

# --- ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏• ---
# rune_name -> list of bids
# bid = {'user_id': int, 'user_mention': str, 'user_display_name': str, 'quantity': int, 'timestamp': int, 'done': bool}
BiddingDataType = Dict[str, List[Dict[str, any]]]

# --- ‡∏Ñ‡∏•‡∏≤‡∏™ UI Components (Buttons, Select, View) ---

class RuneButton(Button):
    def __init__(self, rune_label: str, cog_instance, *, disabled: bool = False):
        safe_label = "".join(c for c in rune_label if c.isalnum())
        super().__init__(label=rune_label, style=discord.ButtonStyle.secondary, custom_id=f"bid_rune_{safe_label[:50]}", disabled=disabled)
        self.rune_label = rune_label
        self.cog = cog_instance

    async def callback(self, interaction: discord.Interaction):
        if self.cog.is_paused:
            await interaction.response.send_message("Bidding is currently paused. // ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏´‡∏¢‡∏∏‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß", ephemeral=True)
            return

        # Defer the response so we have time to process
        await interaction.response.defer()
        
        user = interaction.user
        current_timestamp = int(time.time())

        # Call the updated function and check the return value
        success = await self.cog.add_or_update_bid(self.rune_label, user, current_timestamp)

        if success:
            # If the bid was successful, update the main message
            await self.cog.update_bidding_message(interaction=interaction, is_interaction_edit=True)
        else:
            # If the bid failed (limit reached), send a private message to the user
            # We use followup because we already deferred the interaction
            await interaction.followup.send(
                f"You have reached the maximum of {MAX_BIDS_PER_ITEM} bids for this item. // ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ô‡∏µ‡πâ‡∏Ñ‡∏£‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î {MAX_BIDS_PER_ITEM} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß", 
                ephemeral=True
            )


class ClearBidsButton(Button):
    def __init__(self, cog_instance, *, disabled: bool = False):
        super().__init__(label="Clear My Bids", style=discord.ButtonStyle.primary, custom_id="bid_clear_my", disabled=disabled)
        self.cog = cog_instance

    async def callback(self, interaction: discord.Interaction):
        if self.cog.is_paused:
            await interaction.response.send_message("Bidding is currently paused. // ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏´‡∏¢‡∏∏‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß", ephemeral=True)
            return

        await interaction.response.defer()
        user = interaction.user
        await self.cog.clear_user_bids(user)
        # <<< [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡πÄ‡∏≠‡∏≤ `view=self.view` ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
        await self.cog.update_bidding_message(interaction=interaction, is_interaction_edit=True)


class DoneBiddingButton(Button):
    def __init__(self, cog_instance, *, disabled: bool = False):
        super().__init__(label="Done Bidding", style=discord.ButtonStyle.success, custom_id="bid_done", disabled=disabled)
        self.cog = cog_instance

    async def callback(self, interaction: discord.Interaction):
        ## <<< [‡πÄ‡∏û‡∏¥‡πà‡∏°] ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ pause ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
        if self.cog.is_paused:
            await interaction.response.send_message("Bidding is currently paused. // ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏´‡∏¢‡∏∏‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß", ephemeral=True)
            return

        user = interaction.user
        # ‡∏´‡∏≤‡∏£‡∏π‡∏ô‡∏ó‡∏µ‡πà user ‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡∏∞ *‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà* ‡∏Å‡∏î done
        user_bids_runes = self.cog.get_user_active_bid_runes(user)

        if not user_bids_runes:
            await interaction.response.send_message("You don't have any active bids to mark as done.", ephemeral=True)
            return

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Select Menu ‡πÉ‡∏ô callback ‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡∏¢
        options = [discord.SelectOption(label=rune, value=rune) for rune in user_bids_runes]
        # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô option ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏ô 25 (‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏≠‡∏á Discord)
        if len(options) > 25:
             await interaction.response.send_message("You have too many active bids (>25) to display in a selection menu. Please clear some bids first.", ephemeral=True)
             return

        select = Select(
            placeholder="Select rune(s) to mark as Done",
            min_values=1,
            max_values=min(len(options), 25), # ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô option ‡∏ó‡∏µ‡πà‡∏°‡∏µ ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 25
            options=options,
            custom_id="bid_done_select" # custom_id ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö select
        )

        async def select_callback(select_interaction: discord.Interaction):
            # Important: Defer the response to the select interaction
            await select_interaction.response.defer(ephemeral=True) # Defer ‡πÅ‡∏ö‡∏ö ephemeral
            selected_runes = select_interaction.data.get('values', [])
            await self.cog.mark_bids_done(user, selected_runes)

            # Send confirmation via followup for the select interaction
            await select_interaction.followup.send(f"Marked bids for {', '.join(selected_runes)} as done. Please refresh the main message if needed. // ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏• {', '.join(selected_runes)} ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å‡∏´‡∏≤‡∏Å‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏£‡∏±‡∏ö‚ù§Ô∏è", ephemeral=True)

            # --- ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å ---
            # ‡∏´‡∏≤ View ‡∏´‡∏•‡∏±‡∏Å (view ‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏° Done Bidding) ‡∏à‡∏≤‡∏Å interaction ‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏°
            original_view = self.view
            try:
                # ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° fetch ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å‡∏°‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡∏Å‡∏ß‡πà‡∏≤ interaction ‡πÄ‡∏î‡∏¥‡∏°)
                await self.cog.update_bidding_message(is_interaction_edit=False)
            except Exception as e:
                log.warning(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏´‡∏•‡∏±‡∏á 'Done': {e}")


        select.callback = select_callback
        view = View(timeout=180) # View ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Select ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        view.add_item(select)
        # ‡∏™‡πà‡∏á Select menu ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏≤‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Done
        await interaction.response.send_message("Choose the rune(s) to mark as Done:", view=view, ephemeral=True)


class RestartButton(Button):
    def __init__(self, cog_instance):
        super().__init__(label="Restart Bidding", style=discord.ButtonStyle.danger, custom_id="bid_restart")
        self.cog = cog_instance

    async def callback(self, interaction: discord.Interaction):
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message("You do not have permission to restart bidding.", ephemeral=True)
            return
        await interaction.response.defer() # Defer ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        await self.cog.restart_bidding()
        # ‡∏™‡πà‡∏á view ‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Å‡∏≤‡∏£ restart ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á view ‡πÉ‡∏´‡∏°‡πà (‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ view ‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πá‡πÑ‡∏î‡πâ‡∏ñ‡πâ‡∏≤‡∏õ‡∏∏‡πà‡∏°‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô)
        await self.cog.update_bidding_message(interaction=interaction, is_restart=True, is_interaction_edit=True)


class RefreshButton(Button):
    def __init__(self, cog_instance):
        super().__init__(label="üîÉ", style=discord.ButtonStyle.secondary, custom_id="bid_refresh")
        self.cog = cog_instance

    async def callback(self, interaction: discord.Interaction):
        await interaction.response.defer()
        # <<< [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡πÄ‡∏≠‡∏≤ `view=self.view` ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
        await self.cog.update_bidding_message(interaction=interaction, is_interaction_edit=True)


class BiddingView(View):
    # ‡∏ó‡∏≥‡πÉ‡∏´‡πâ View ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢ ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏∏‡πà‡∏°‡∏ï‡πà‡∏≤‡∏á‡πÜ
    ## <<< [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡∏£‡∏±‡∏ö is_paused ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏∏‡πà‡∏°
    def __init__(self, cog_instance, *, is_paused: bool = False, timeout=None):
        super().__init__(timeout=timeout)
        self.cog = cog_instance

        # ‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡∏à‡∏∞‡∏ñ‡∏π‡∏Å disable ‡∏ï‡∏≠‡∏ô pause
        is_action_disabled = is_paused

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏° Refresh ‡∏Å‡πà‡∏≠‡∏ô (‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£ disable)
        self.add_item(RefreshButton(cog_instance=self.cog))

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏π‡∏ô
        for rune in BIDDING_RUNES:
             self.add_item(RuneButton(rune, self.cog, disabled=is_action_disabled))

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ (‡∏ö‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏à‡∏∞ disable ‡∏ï‡∏≠‡∏ô pause)
        self.add_item(ClearBidsButton(self.cog, disabled=is_action_disabled))
        self.add_item(DoneBiddingButton(self.cog, disabled=is_action_disabled))
        # ‡∏õ‡∏∏‡πà‡∏° Restart ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á disable
        self.add_item(RestartButton(self.cog))

# --- ‡∏Ñ‡∏•‡∏≤‡∏™ Cog ‡∏´‡∏•‡∏±‡∏Å ---
class BiddingCog(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.rune_bids: BiddingDataType = {rune: [] for rune in BIDDING_RUNES}
        self.rune_bid_order: List[str] = []
        self.bidding_message_id: Optional[int] = None
        self.bidding_channel_id: int = BIDDING_CHANNEL_ID
        self.persistent_view_added = False
        self.message_lock = asyncio.Lock()
        self.is_paused: bool = False ## <<< [‡πÄ‡∏û‡∏¥‡πà‡∏°] ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Pause/Resume
        log.info(f"BiddingCog: ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡πà‡∏≠‡∏á ID: {self.bidding_channel_id}")

    # --- Listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö View ‡πÅ‡∏ö‡∏ö‡∏ñ‡∏≤‡∏ß‡∏£ ---
    @commands.Cog.listener()
    async def on_ready(self):
        if not self.persistent_view_added:
             log.info("BiddingCog: on_ready - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö/‡πÄ‡∏û‡∏¥‡πà‡∏° Persistent View...")
             ## <<< [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡∏™‡πà‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ is_paused ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏ã‡∏∂‡πà‡∏á‡∏Ñ‡∏∑‡∏≠ False ‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°)
             persistent_view = BiddingView(cog_instance=self, is_paused=self.is_paused, timeout=None)
             self.bot.add_view(persistent_view)
             self.persistent_view_added = True
             log.info("BiddingCog: Persistent View ‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß")
             if self.bidding_message_id:
                  log.info(f"‡∏û‡∏ö Bidding Message ID ‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ: {self.bidding_message_id}")
             else:
                  log.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö Bidding Message ID ‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ. ‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ !startbiddingrune ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà")


    ## <<< [‡πÄ‡∏û‡∏¥‡πà‡∏°] ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á !pause
    @commands.command(name="pause")
    @commands.has_permissions(administrator=True)
    @commands.guild_only()
    async def pause_bidding(self, ctx: commands.Context):
        """Pauses the bidding. Disables bidding buttons. (Admin only)"""
        if self.is_paused:
            await ctx.send("Bidding is already paused.", ephemeral=True)
            return

        self.is_paused = True
        log.info(f"--- Bidding PAUSED by {ctx.author.name} ---")
        await ctx.send("Bidding has been paused. Buttons will be disabled.", ephemeral=True)
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡∏õ‡∏¥‡∏î‡∏õ‡∏∏‡πà‡∏°
        await self.update_bidding_message()

    ## <<< [‡πÄ‡∏û‡∏¥‡πà‡∏°] ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á !resume
    @commands.command(name="resume")
    @commands.has_permissions(administrator=True)
    @commands.guild_only()
    async def resume_bidding(self, ctx: commands.Context):
        """Resumes the bidding. Re-enables bidding buttons. (Admin only)"""
        if not self.is_paused:
            await ctx.send("Bidding is not currently paused.", ephemeral=True)
            return

        self.is_paused = False
        log.info(f"--- Bidding RESUMED by {ctx.author.name} ---")
        await ctx.send("Bidding has been resumed. Buttons will be re-enabled.", ephemeral=True)
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡∏∏‡πà‡∏°
        await self.update_bidding_message()

    @commands.command(name="manualbid", aliases=["mbid", "manual"])
    @commands.has_permissions(administrator=True)
    @commands.guild_only()
    async def manual_bid(self, ctx: commands.Context, item_name: str, user: discord.Member, quantity: int, timestamp: Optional[int] = None):
        """
        Manually set a bid for a user. (Admin only)
        
        Usage: !manualbid "<Item Name>" @User <TotalQuantity> [OptionalUnixTimestamp]
        Example: !manualbid "Netherforce" @SomeUser 3
        Example with timestamp: !manualbid "Netherforce" @SomeUser 3 1672531200
        Note: The timestamp must be a number, not the <t:...:R> format.
        """
        # --- Input Validation ---
        if quantity <= 0:
            await ctx.send("‚ùå Quantity must be a positive number.", ephemeral=True)
            return

        # Sanitize item_name and check if it's a valid bidding item
        clean_item_name = item_name.strip()
        if clean_item_name not in BIDDING_RUNES:
            await ctx.send(
                f"‚ùå Invalid item name: `{clean_item_name}`.\n"
                f"Valid items are: `{'`, `'.join(BIDDING_RUNES)}`", 
                ephemeral=True
            )
            return

        # Use the provided timestamp or default to the current time
        final_timestamp = timestamp or int(time.time())

        # --- Execution ---
        await self.manual_add_or_update_bid(
            admin=ctx.author,
            target_user=user,
            rune_label=clean_item_name,
            quantity=quantity,
            timestamp=final_timestamp
        )

        # --- Feedback ---
        await ctx.send(f"‚úÖ Manually set bid for **{user.display_name}** on **{clean_item_name}** to **{quantity}**.", ephemeral=True)
        
        # Update the main bidding message to show the change
        await self.update_bidding_message()


    # --- Command ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°/‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏• ---
    @commands.command(name="startbiddingrune")
    @commands.has_permissions(administrator=True) # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÉ‡∏´‡πâ Admin ‡πÉ‡∏ä‡πâ
    @commands.guild_only() # ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô Server
    async def start_bidding(self, ctx: commands.Context, channel: Optional[discord.TextChannel] = None):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏ (Admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)"""
        target_channel = channel or ctx.guild.get_channel(self.bidding_channel_id) or ctx.channel
        if not target_channel or not isinstance(target_channel, discord.TextChannel):
            await ctx.send("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•", ephemeral=True)
            return

        user_guide = self._get_user_guide()
        if "# Error" in user_guide:
             await ctx.send(f"‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î User Guide ‡πÑ‡∏î‡πâ\n{user_guide}", ephemeral=True)

        try:
            await target_channel.send(user_guide)
        except discord.Forbidden:
             await ctx.send(f"‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° User Guide ‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á {target_channel.mention}", ephemeral=True)
             return
        except discord.HTTPException as e:
            await ctx.send(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á User Guide: {e}", ephemeral=True)

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á View ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å
        ## <<< [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡∏™‡πà‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ is_paused ‡πÑ‡∏õ‡∏¢‡∏±‡∏á View ‡∏ï‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á
        view = BiddingView(cog_instance=self, is_paused=self.is_paused, timeout=None)
        initial_content = "Choose a rune to bid on:"
        try:
            msg = await target_channel.send(initial_content, view=view)
            if self.bidding_message_id:
                 try:
                     old_msg = await target_channel.fetch_message(self.bidding_message_id)
                     await old_msg.delete()
                     log.info(f"‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤ ID: {self.bidding_message_id}")
                 except discord.NotFound:
                     log.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö")
                 except discord.Forbidden:
                     log.warning("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤")
                 except Exception as e:
                     log.warning(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡πà‡∏≤: {e}")

            self.bidding_message_id = msg.id
            log.info(f"‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà ID: {self.bidding_message_id} ‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á {target_channel.id}")
            await ctx.send(f"‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÉ‡∏ô {target_channel.mention} (ID: {msg.id})", ephemeral=True)
        except discord.Forbidden:
             await ctx.send(f"‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏° View ‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á {target_channel.mention}", ephemeral=True)
        except discord.HTTPException as e:
            log.exception(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î HTTP ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å: {e}")
            await ctx.send(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å: {e}", ephemeral=True)
        except Exception as e:
            log.exception(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å: {e}")
            await ctx.send(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î: {e}", ephemeral=True)


    def _get_user_guide(self) -> str:
        """‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ User Guide ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå GUIDE_FILENAME"""
        default_error_message = "# Error\nCould not load the user guide."
        try:
            script_dir = os.path.dirname(__file__)
            file_path = os.path.join(script_dir, GUIDE_FILENAME)

            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            if not content.strip():
                 log.warning(f"‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠ '{file_path}' ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤")
                 return f"# Warning\nUser guide file '{GUIDE_FILENAME}' is empty."
            log.info(f"‡πÇ‡∏´‡∏•‡∏î User Guide ‡∏à‡∏≤‡∏Å '{file_path}' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            return content
        except FileNotFoundError:
            log.error(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠ '{file_path}' ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ")
            return f"# Error\nCould not load user guide: File '{GUIDE_FILENAME}' not found at expected location '{file_path}'."
        except IOError as e:
            log.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î IO ‡∏Ç‡∏ì‡∏∞‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠ '{file_path}': {e}")
            return f"# Error\nCould not read user guide file '{GUIDE_FILENAME}': {e}"
        except Exception as e:
             log.exception(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î‡∏Ç‡∏ì‡∏∞‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠ '{file_path}': {e}")
             return default_error_message


    # --- Methods ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏• ---
    async def add_or_update_bid(self, rune_label: str, user: discord.User | discord.Member, timestamp: int) -> bool:
        """
        Adds a new bid entry for the user. Each call represents one bid.
        Returns:
            bool: True if the bid was added, False if the user reached their bid limit.
        """
        async with self.message_lock:  # Lock before modifying bid data
            if rune_label not in self.rune_bids:
                log.warning(f"Attempted bid on unknown rune: {rune_label}")
                return False

            bids_for_rune = self.rune_bids[rune_label]
            user_id = user.id
            display_name = user.display_name
            user_global_name = user.global_name or user.name

            # --- [NEW LOGIC] ---
            # Count the number of existing entries for this user on this rune
            user_bid_count = sum(1 for bid in bids_for_rune if bid['user_id'] == user_id)

            # Check if they have reached the maximum
            if user_bid_count >= MAX_BIDS_PER_ITEM:
                log.info(f"Bid attempt rejected for {display_name} on {rune_label}. Limit of {MAX_BIDS_PER_ITEM} reached.")
                return False  # Return False to indicate failure

            # Always add a new bid entry, as each click is a separate bid.
            new_bid = {
                'user_id': user_id,
                'user_mention': user.mention,
                'user_display_name': user_global_name,
                'quantity': 1,  # Quantity is always 1 per entry
                'timestamp': timestamp,
                'done': False
            }
            bids_for_rune.append(new_bid)
            log.info(f"Added new bid for {display_name} ({user_id}) on {rune_label}. They now have {user_bid_count + 1} bids.")
            
            if rune_label not in self.rune_bid_order:
                self.rune_bid_order.append(rune_label)
            
            return True # Return True to indicate success

    async def clear_user_bids(self, user: discord.User):
        """‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏"""
        async with self.message_lock: # ‡∏•‡πá‡∏≠‡∏Ñ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            user_id = user.id
            cleared_count = 0
            runes_to_check = list(self.rune_bids.keys())

            for rune in runes_to_check:
                initial_len = len(self.rune_bids[rune])
                self.rune_bids[rune] = [bid for bid in self.rune_bids[rune] if bid['user_id'] != user_id]
                cleared_in_rune = initial_len - len(self.rune_bids[rune])
                if cleared_in_rune > 0:
                    cleared_count += cleared_in_rune
                    log.info(f"‡∏•‡∏ö {cleared_in_rune} bid ‡∏Ç‡∏≠‡∏á {user.display_name} ({user_id}) ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å {rune}")
                    if not self.rune_bids[rune] and rune in self.rune_bid_order:
                        try:
                            self.rune_bid_order.remove(rune)
                            log.info(f"‡∏ô‡∏≥ {rune} ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ bid ‡πÄ‡∏´‡∏•‡∏∑‡∏≠")
                        except ValueError: pass

            if cleared_count > 0:
                log.info(f"‡∏£‡∏ß‡∏°‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏• {cleared_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: {user.display_name} ({user_id})")
            else:
                 log.info(f"‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ {user.display_name} ({user_id}) ‡πÑ‡∏°‡πà‡∏°‡∏µ bid ‡πÉ‡∏´‡πâ‡∏•‡∏ö")


    def get_user_active_bid_runes(self, user: discord.User) -> List[str]:
        """‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏π‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà 'done' """
        user_id = user.id
        return [rune for rune, bids in self.rune_bids.items() if any(bid['user_id'] == user_id and not bid.get('done', False) for bid in bids)]

    async def mark_bids_done(self, user: discord.User, runes_to_mark: List[str]):
        """‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô 'done'"""
        async with self.message_lock: # ‡∏•‡πá‡∏≠‡∏Ñ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
            user_id = user.id
            marked_count = 0
            display_name = user.display_name
            for rune in runes_to_mark:
                if rune in self.rune_bids:
                    for bid in self.rune_bids[rune]:
                        if bid['user_id'] == user_id and not bid.get('done', False):
                            bid['done'] = True
                            marked_count += 1
            if marked_count > 0:
                log.info(f"‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ {marked_count} ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô 'done' ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {display_name} ({user_id}) ‡πÉ‡∏ô‡∏£‡∏π‡∏ô: {', '.join(runes_to_mark)}")
            else:
                 log.info(f"‡πÑ‡∏°‡πà‡∏û‡∏ö bid ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà done ‡∏Ç‡∏≠‡∏á {display_name} ({user_id}) ‡πÉ‡∏ô‡∏£‡∏π‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: {', '.join(runes_to_mark)}")


    async def restart_bidding(self):
        """‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        async with self.message_lock: # ‡∏•‡πá‡∏≠‡∏Ñ‡∏Ç‡∏ì‡∏∞‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
            self.rune_bids = {rune: [] for rune in BIDDING_RUNES}
            self.rune_bid_order = []
            log.info("--- ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥) ---")


    # --- Method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏• ---
    ## <<< [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏±‡∏ö view, ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏™‡∏°‡∏≠‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ is_paused
    async def update_bidding_message(self, interaction: Optional[discord.Interaction] = None, msg_to_edit: Optional[discord.Message] = None, is_restart: bool = False, is_interaction_edit: bool = True):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å (Thread-safe)"""
        async with self.message_lock:
            log.debug(f"Update message triggered by: {'Interaction' if interaction else 'Direct Call'}{' (Restart)' if is_restart else ''}")

            ## <<< [‡πÄ‡∏û‡∏¥‡πà‡∏°] ‡∏™‡∏£‡πâ‡∏≤‡∏á Prefix ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Pause
            status_prefix = ""
            if self.is_paused:
                status_prefix = "## ‚è∏Ô∏è BIDDING IS CURRENTLY PAUSED ‚è∏Ô∏è\n\n"

            if is_restart:
                new_content = status_prefix + "Bidding has been restarted. Choose a rune to bid on:"
            else:
                active_bids_data = {rune: bids for rune, bids in self.rune_bids.items() if bids}
                if not active_bids_data:
                    new_content = status_prefix + "No current bids."
                else:
                    def sort_key(rune_name):
                        try: order_index = self.rune_bid_order.index(rune_name)
                        except ValueError: order_index = float('inf')
                        return (-len(self.rune_bids.get(rune_name, [])), order_index)

                    sorted_runes = sorted(active_bids_data.keys(), key=sort_key)
                    lines = []
                    for rune in sorted_runes:
                        bids = active_bids_data[rune]
                        sorted_bids = sorted(bids, key=lambda b: b.get('timestamp', 0))
                        
                        # --- [MODIFIED LINE] ---
                        # Remove the 'quantity' part from the display string
                        bid_lines = [
                            (f"{idx + 1}. {bid.get('user_mention', 'Unknown User')} "
                             f"({bid.get('user_display_name', '?')}) " # <-- Removed the quantity part here
                             f"<t:{bid.get('timestamp', 0)}:R> {'‚úÖ' if bid.get('done', False) else ''}").strip()
                            for idx, bid in enumerate(sorted_bids)
                        ]
                        # --- [END MODIFIED LINE] ---
                        
                        lines.append(f"# **{rune}**:\n" + "\n".join(bid_lines))
                    bid_content = "\n\n".join(lines)
                    new_content = status_prefix + bid_content
                    if len(new_content) > 4000:
                         new_content = new_content[:3950] + "\n... (Message too long, truncated)"
                         log.warning("‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏™‡∏±‡πâ‡∏ô‡∏•‡∏á")


            ## <<< [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡∏™‡∏£‡πâ‡∏≤‡∏á View ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏™‡∏°‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏∏‡πà‡∏° (disabled/enabled) ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            current_view = BiddingView(cog_instance=self, is_paused=self.is_paused, timeout=None)

            # --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ---
            message_edited = False
            target_message_id = self.bidding_message_id
            edit_target = None

            if interaction and is_interaction_edit:
                edit_target = interaction
                log.debug(f"‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ú‡πà‡∏≤‡∏ô Interaction: {interaction.id}")
            elif msg_to_edit:
                 edit_target = msg_to_edit
                 target_message_id = msg_to_edit.id
                 log.debug(f"‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ú‡πà‡∏≤‡∏ô Message object: {msg_to_edit.id}")
            elif target_message_id:
                 log.debug(f"‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ú‡πà‡∏≤‡∏ô Message ID ‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ: {target_message_id}")
                 pass
            else:
                 log.warning("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ: ‡πÑ‡∏°‡πà‡∏°‡∏µ Interaction, Message ‡∏´‡∏£‡∏∑‡∏≠ Message ID ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç")
                 return

            try:
                if isinstance(edit_target, discord.Interaction):
                    await edit_target.edit_original_response(content=new_content, view=current_view)
                    message_edited = True
                    log.info(f"‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏ú‡πà‡∏≤‡∏ô Interaction {edit_target.id} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                elif isinstance(edit_target, discord.Message):
                    await edit_target.edit(content=new_content, view=current_view)
                    message_edited = True
                    log.info(f"‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏ú‡πà‡∏≤‡∏ô Message {edit_target.id} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                elif target_message_id: # ‡∏Å‡∏£‡∏ì‡∏µ‡∏ï‡πâ‡∏≠‡∏á fetch
                    channel = self.bot.get_channel(self.bidding_channel_id) or await self.bot.fetch_channel(self.bidding_channel_id)
                    if channel and isinstance(channel, discord.TextChannel):
                        msg = await channel.fetch_message(target_message_id)
                        await msg.edit(content=new_content, view=current_view)
                        message_edited = True
                        log.info(f"‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏ú‡πà‡∏≤‡∏ô fetch ID {target_message_id} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                    elif not channel:
                         log.error(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡πà‡∏≠‡∏á ID {self.bidding_channel_id} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö fetch message")
                    else:
                         log.error(f"‡∏ä‡πà‡∏≠‡∏á ID {self.bidding_channel_id} ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà TextChannel")

            except discord.NotFound:
                log.error(f"‡πÑ‡∏°‡πà‡∏û‡∏ö Interaction ‡∏´‡∏£‡∏∑‡∏≠ Message (ID: {target_message_id}) ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡∏≠‡∏≤‡∏à‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß")
                if target_message_id and target_message_id == self.bidding_message_id:
                    self.bidding_message_id = None
                    log.warning("Bidding Message ID ‡∏ñ‡∏π‡∏Å‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°")
            except discord.HTTPException as e:
                log.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î HTTP ‡∏Ç‡∏ì‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏• (ID: {target_message_id}): {e.status} - {e.text}")
            except Exception as e:
                log.exception(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î‡∏Ç‡∏ì‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏• (ID: {target_message_id}): {e}")

            if not message_edited:
                log.warning("‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")

    async def manual_add_or_update_bid(self, admin: discord.User, target_user: discord.Member, rune_label: str, quantity: int, timestamp: int):
        """
        Manually sets a user's total bid count by removing their old bids
        and adding a specific number of new, individual bids.
        """
        async with self.message_lock: # Lock before modifying bid data
            if rune_label not in self.rune_bids:
                log.warning(f"Manual bid by {admin.name} for {target_user.name} failed: Unknown rune {rune_label}")
                return

            user_id = target_user.id
            user_global_name = target_user.global_name or target_user.name

            # --- [NEW LOGIC] ---
            # 1. Remove all existing bids for this user on this specific rune.
            self.rune_bids[rune_label] = [
                bid for bid in self.rune_bids[rune_label] if bid['user_id'] != user_id
            ]
            log.info(f"Manual bid: Cleared previous bids for {target_user.display_name} on {rune_label}.")

            # 2. Add 'quantity' number of new, individual bids.
            for i in range(quantity):
                new_bid = {
                    'user_id': user_id,
                    'user_mention': target_user.mention,
                    'user_display_name': user_global_name,
                    'quantity': 1, # Each entry has a quantity of 1
                    'timestamp': timestamp + i, # Add a tiny offset to maintain order if needed
                    'done': False
                }
                self.rune_bids[rune_label].append(new_bid)

            log.info(f"Manual bid by {admin.name}: Set {target_user.display_name}'s total bids for {rune_label} to {quantity}")
            
            # Ensure the rune is in the display order if it wasn't already
            if quantity > 0 and rune_label not in self.rune_bid_order:
                self.rune_bid_order.append(rune_label)
            # Remove from order if bids are set to 0 and no one else is bidding
            elif quantity == 0 and not self.rune_bids[rune_label]:
                 if rune_label in self.rune_bid_order:
                     self.rune_bid_order.remove(rune_label)


# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Setup ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Cog ---
async def setup(bot: commands.Bot):
    """Loads the BiddingCog."""
    try:
        cog_instance = BiddingCog(bot)
        await bot.add_cog(cog_instance)
        log.info("BiddingCog: Setup complete, Cog added to bot.")
    except Exception as e:
        log.exception("BiddingCog: Failed to load Cog.")
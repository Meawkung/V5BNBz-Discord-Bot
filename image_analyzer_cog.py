# image_analyzer_cog.py
import discord
from discord.ext import commands
import google.generativeai as genai
import os
import io         # <<< ‡πÄ‡∏û‡∏¥‡πà‡∏° import io
import json
from dotenv import load_dotenv
import logging
import re
from PIL import Image # <<< ‡πÄ‡∏û‡∏¥‡πà‡∏° import Image ‡∏à‡∏≤‡∏Å Pillow

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logging (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
log = logging.getLogger(__name__)

# --- ‡πÇ‡∏´‡∏•‡∏î Environment Variables ---
# (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
load_dotenv()
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
if not GEMINI_API_KEY:
    # ... (error handling ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
    log.error("‡πÑ‡∏°‡πà‡∏û‡∏ö GEMINI_API_KEY ‡πÉ‡∏ô .env ‡πÑ‡∏ü‡∏•‡πå")
    raise ValueError("‡πÑ‡∏°‡πà‡∏û‡∏ö GEMINI_API_KEY ‡πÉ‡∏ô .env ‡πÑ‡∏ü‡∏•‡πå ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Image Analyzer Cog")

# --- ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Gemini ---
# (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
try:
    genai.configure(api_key=GEMINI_API_KEY)
    gemini_model_name = 'gemini-2.0-flash' # ‡∏´‡∏£‡∏∑‡∏≠ 'gemini-2.0-flash'
    log.info(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• Gemini: {gemini_model_name}")
    gemini_model = genai.GenerativeModel(gemini_model_name)
    log.info(f"Image Analyzer Cog: ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• Gemini ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•: {gemini_model_name})")
    GEMINI_PROMPT = "‡∏Ç‡∏≠‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡πà‡∏≤ stat ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏à‡∏≤‡∏Å‡πÉ‡∏ô‡∏£‡∏π‡∏õ ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡πà‡∏≤ status ‡πÄ‡∏ä‡πà‡∏ô STR AGI VIT INT DEX LUK ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô JSON"
except Exception as e:
    # ... (error handling ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
    log.exception(f"!!! ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Gemini (Image Analyzer Cog) ‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏°‡πÄ‡∏î‡∏• {gemini_model_name}: {e}")
    raise ConnectionError(f"‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Gemini ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ({gemini_model_name}): {e}")

class ImageAnalyzerCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        log.info("Image Analyzer Cog: ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

    @commands.Cog.listener()
    async def on_message(self, message: discord.Message):
        if message.author == self.bot.user: return
        if not isinstance(message.channel, discord.DMChannel): return

        log.info(f"‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° DM ‡∏à‡∏≤‡∏Å: {message.author} (ID: {message.author.id})")

        if message.attachments:
            attachment = message.attachments[0]
            log.info(f"-> ‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö: {attachment.filename} ({attachment.content_type})")

            if attachment.content_type and attachment.content_type.startswith('image/'):
                processing_msg = None
                original_image_bytes = None # ‡πÄ‡∏Å‡πá‡∏ö bytes ‡∏î‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏ß‡πâ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏ì‡∏µ error
                try:
                    # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
                    original_image_bytes = await attachment.read()
                    log.info(f"‡∏≠‡πà‡∏≤‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ({len(original_image_bytes)} bytes)")

                    # --- ‡∏ó‡∏≥ Image Processing: ‡πÅ‡∏ö‡πà‡∏á‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢ ---
                    processed_image_bytes = None
                    try:
                        log.info("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (‡πÅ‡∏ö‡πà‡∏á‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ã‡πâ‡∏≤‡∏¢)...")
                        # 1. ‡πÇ‡∏´‡∏•‡∏î image bytes ‡πÄ‡∏Ç‡πâ‡∏≤ Pillow
                        img = Image.open(io.BytesIO(original_image_bytes))

                        # 2. ‡∏´‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î
                        width, height = img.size
                        log.info(f"‡∏Ç‡∏ô‡∏≤‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö: {width}x{height}")

                        # 3. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ã‡πâ‡∏≤‡∏¢ (left, upper, right, lower)
                        # ‡πÉ‡∏ä‡πâ integer division // ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°
                        left_half_coords = (0, 0, width // 2, height)
                        log.info(f"‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ã‡πâ‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏î‡πâ: {left_half_coords}")

                        # 4. ‡∏ï‡∏±‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
                        left_half_img = img.crop(left_half_coords)
                        log.info(f"‡∏ï‡∏±‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ã‡πâ‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏°‡πà: {left_half_img.width}x{left_half_img.height}")

                        # 5. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏á‡πÉ‡∏ô BytesIO buffer
                        output_buffer = io.BytesIO()
                        # ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏î‡πâ‡∏ß‡∏¢ format ‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
                        img_format = img.format if img.format else attachment.content_type.split('/')[-1].upper()
                        # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏ì‡∏µ format ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô (‡πÄ‡∏ä‡πà‡∏ô webp ‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á plugin ‡πÄ‡∏û‡∏¥‡πà‡∏°)
                        if img_format == 'WEBP' and not Image.registered_extensions().get('.webp'):
                             log.warning("Format WEBP ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ‡∏à‡∏∞‡∏•‡∏≠‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô PNG ‡πÅ‡∏ó‡∏ô")
                             img_format = 'PNG'
                        elif not img_format or img_format.upper() not in ['JPEG', 'PNG', 'GIF', 'BMP', 'TIFF']:
                             log.warning(f"‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å format '{img_format}', ‡∏à‡∏∞‡∏•‡∏≠‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô PNG ‡πÅ‡∏ó‡∏ô")
                             img_format = 'PNG' # ‡πÉ‡∏ä‡πâ PNG ‡πÄ‡∏õ‡πá‡∏ô default ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢

                        left_half_img.save(output_buffer, format=img_format)
                        processed_image_bytes = output_buffer.getvalue()
                        log.info(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ã‡πâ‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô bytes ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ({len(processed_image_bytes)} bytes, format: {img_format})")

                    except Exception as img_proc_err:
                        log.exception(f"!!! ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û: {img_proc_err}")
                        # ‡∏ñ‡πâ‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏´‡∏£‡∏∑‡∏≠ fallback ‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÄ‡∏î‡∏¥‡∏°
                        # ‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÅ‡∏à‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ
                        await message.channel.send("‚ùå ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏ö‡πà‡∏á‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏£‡∏π‡∏õ‡πÑ‡∏î‡πâ")
                        return # ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á listener ‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡∏¢
                    # --- ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î Image Processing ---

                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ bytes ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
                    if not processed_image_bytes:
                         log.error("processed_image_bytes ‡πÄ‡∏õ‡πá‡∏ô None ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• (Logic Error?)")
                         await message.channel.send("‚ùå ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•")
                         return

                    # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• *‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å* ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏£‡∏π‡∏õ‡πÄ‡∏™‡∏£‡πá‡∏à
                    processing_msg = await message.channel.send(f"‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ã‡πâ‡∏≤‡∏¢‡πÉ‡∏´‡πâ {gemini_model_name}... üß†‚ö°")

                    # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Gemini ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß
                    image_part = {
                        # ‡πÉ‡∏ä‡πâ content_type ‡πÄ‡∏î‡∏¥‡∏° ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ Gemini ‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏π‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
                        # ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤ save ‡πÑ‡∏õ‡∏Å‡πá‡πÑ‡∏î‡πâ (‡πÄ‡∏ä‡πà‡∏ô 'image/png' ‡∏ñ‡πâ‡∏≤ fallback)
                        "mime_type": attachment.content_type if img_format.upper() != 'PNG' else 'image/png',
                        "data": processed_image_bytes # <<< ‡πÉ‡∏ä‡πâ bytes ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ã‡πâ‡∏≤‡∏¢
                    }

                    log.info(f"-> ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ã‡πâ‡∏≤‡∏¢ ({len(processed_image_bytes)} bytes) ‡πÅ‡∏•‡∏∞ prompt ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Gemini ({gemini_model_name})...")
                    try:
                        response = await gemini_model.generate_content_async([GEMINI_PROMPT, image_part])

                        if processing_msg:
                           await processing_msg.delete()
                           processing_msg = None

                        result_text = response.text
                        log.info(f"<- ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å Gemini ({gemini_model_name}) ‡∏´‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ã‡πâ‡∏≤‡∏¢:\n{result_text}")

                        # --- ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• JSON ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 4 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---
                        processed_output = None
                        json_parsed_successfully = False

                        if hasattr(response, 'prompt_feedback') and response.prompt_feedback.block_reason:
                            # ... (‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ block ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
                             block_reason = response.prompt_feedback.block_reason
                             log.warning(f"Gemini block ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å: {block_reason}")
                             processed_output = f"‚ö†Ô∏è ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ñ‡∏π‡∏Å‡∏ö‡∏•‡πá‡∏≠‡∏Å‡πÇ‡∏î‡∏¢ Gemini ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å: {block_reason}\n(Raw Response: {result_text})"
                        else:
                            try:
                                # ... (Clean ‡πÅ‡∏•‡∏∞ Parse JSON ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ...
                                potential_json = result_text.strip()
                                match = re.search(r"```(?:json)?\s*(\{.*?\})\s*```", potential_json, re.DOTALL | re.IGNORECASE)
                                if match:
                                    potential_json = match.group(1).strip()
                                else:
                                    start_brace = potential_json.find('{')
                                    end_brace = potential_json.rfind('}')
                                    if start_brace != -1 and end_brace != -1 and start_brace < end_brace:
                                        potential_json = potential_json[start_brace : end_brace + 1]

                                parsed_json = json.loads(potential_json)
                                json_parsed_successfully = True
                                log.info("Parse JSON ‡∏à‡∏≤‡∏Å Gemini ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

                                if isinstance(parsed_json, dict):
                                    all_items = list(parsed_json.items())
                                    last_four_items = all_items[-4:]
                                    last_four_dict = dict(last_four_items)

                                    if last_four_dict:
                                        json_output_string = json.dumps(last_four_dict, indent=2, ensure_ascii=False)
                                        processed_output = f"‚úÖ ‡∏Ñ‡πà‡∏≤ Stat 4 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ (‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ã‡πâ‡∏≤‡∏¢) ‡πÇ‡∏î‡∏¢ Gemini ({gemini_model_name}):\n```json\n{json_output_string}\n```" # ‡πÄ‡∏û‡∏¥‡πà‡∏° context
                                        log.info("‡∏î‡∏∂‡∏á‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö 4 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏à‡∏≤‡∏Å JSON ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                                    else:
                                        # ... (‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏ì‡∏µ JSON ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤ ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
                                        full_parsed_json_string = json.dumps(parsed_json, indent=2, ensure_ascii=False)
                                        processed_output = f"‚ö†Ô∏è ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö JSON (‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ã‡πâ‡∏≤‡∏¢) ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 4 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢:\n```json\n{full_parsed_json_string}\n```"
                                else:
                                    # ... (‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Dict ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
                                    full_parsed_json_string = json.dumps(parsed_json, indent=2, ensure_ascii=False)
                                    processed_output = f"‚ö†Ô∏è Gemini ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON (‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ã‡πâ‡∏≤‡∏¢) ‡πÅ‡∏ï‡πà‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Object):\n```json\n{full_parsed_json_string}\n```"

                            except json.JSONDecodeError as json_err:
                                # ... (‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Parse Error ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
                                log.warning(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ parse JSON ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å Gemini (‡πÅ‡∏°‡πâ‡∏à‡∏∞‡∏•‡∏≠‡∏á clean ‡πÅ‡∏•‡πâ‡∏ß): {json_err}")
                                processed_output = f"‚úÖ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å Gemini ({gemini_model_name}) (‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ã‡πâ‡∏≤‡∏¢, ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÑ‡∏î‡πâ):\n```text\n{result_text}\n```"
                            except Exception as e:
                                # ... (‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏≠‡∏∑‡πà‡∏ô ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
                                log.exception(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏≠‡∏∑‡πà‡∏ô‡∏Ç‡∏ì‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• JSON ‡∏à‡∏≤‡∏Å Gemini: {e}")
                                processed_output = f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å Gemini:\n```text\n{result_text}\n```"
                        # --- ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• JSON ---

                        # --- ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå ---
                        if processed_output:
                            await message.channel.send(processed_output)
                        else:
                            # ... (Fallback error message ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
                            log.error("processed_output ‡πÄ‡∏õ‡πá‡∏ô None ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ (Logic Error?)")
                            await message.channel.send("‚ùå ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå")

                    # --- ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î Gemini API ---
                    # (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
                    except genai.types.BlockedPromptException as blocked_err: # ...
                         log.warning(f"Gemini API block prompt: {blocked_err}")
                         if processing_msg: await processing_msg.delete()
                         await message.channel.send(f"‚ö†Ô∏è ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ Prompt ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ã‡πâ‡∏≤‡∏¢) ‡∏ñ‡∏π‡∏Å‡∏ö‡∏•‡πá‡∏≠‡∏Å‡πÇ‡∏î‡∏¢‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Ç‡∏≠‡∏á Gemini.")
                    except genai.types.StopCandidateException as stop_err: # ...
                         log.warning(f"Gemini API stopped generation: {stop_err}")
                         if processing_msg: await processing_msg.delete()
                         await message.channel.send(f"‚ö†Ô∏è Gemini ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏±‡∏ô ‡∏≠‡∏≤‡∏à‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô.")
                    except Exception as e: # ...
                         log.exception(f"!!! ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Gemini API ({gemini_model_name}): {e}")
                         if processing_msg: await processing_msg.delete()
                         error_message = f"{e}"
                         await message.channel.send(f"‚ùå ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏±‡∏ö Gemini ({gemini_model_name}): {error_message}")

                # --- ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏≠‡∏∑‡πà‡∏ô‡πÜ ---
                # (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
                except discord.HTTPException as e: # ...
                    log.exception(f"!!! ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö Discord (HTTP): {e}")
                    if processing_msg:
                         try: await processing_msg.delete()
                         except discord.NotFound: pass
                    await message.channel.send("‚ùå ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏ô Discord")
                except Exception as e: # ...
                    log.exception(f"!!! ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î‡πÉ‡∏ô on_message: {e}")
                    if processing_msg:
                         try: await processing_msg.delete()
                         except discord.NotFound: pass
                    await message.channel.send(f"‚ùå ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏: {e}")

            else: # ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
                log.info("-> ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û")
        else: # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö
            log.info("-> ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö")
            pass

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Setup (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---
async def setup(bot: commands.Bot):
    """Loads the ImageAnalyzerCog."""
    # (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
    try:
        await bot.add_cog(ImageAnalyzerCog(bot))
        log.info("‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô setup ‡∏Ç‡∏≠‡∏á Image Analyzer Cog ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: ‡πÇ‡∏´‡∏•‡∏î Cog ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
    except ConnectionError as e:
         log.error(f"!!! ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î Image Analyzer Cog ‡πÑ‡∏î‡πâ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠/‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Gemini: {e}")
    except Exception as e:
        log.exception(f"!!! ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô setup ‡∏Ç‡∏≠‡∏á Image Analyzer Cog ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏≠‡∏∑‡πà‡∏ô: {e}")
        raise e
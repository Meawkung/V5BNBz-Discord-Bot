# voice_logging_cog.py
import discord
from discord.ext import commands
import os
import time
from datetime import datetime, timezone, timedelta
import logging

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logger ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Cog ‡∏ô‡∏µ‡πâ
log = logging.getLogger(__name__)

# --- ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà ---
# ‡∏¢‡πâ‡∏≤‡∏¢ ID ‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏°‡∏≤‡πÑ‡∏ß‡πâ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏á‡πà‡∏≤‡∏¢
MONITORED_VOICE_CHANNEL_IDS = [1250561983305224222, 1135925419753869312, 1251996192699711599] # #GLMain, #GLSub, Overun
NOTIFICATION_TEXT_CHANNEL_IDS = [1264562975851810847] # Channel ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠ (Helper Functions) ---
# ‡πÄ‡∏Å‡πá‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ö‡∏ô‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∞‡∏¢‡πâ‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô private method ‡πÉ‡∏ô class ‡∏Å‡πá‡πÑ‡∏î‡πâ (_‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô)

def _get_unix_timestamp():
    """Return current Unix epoch timestamp."""
    return int(time.time())

def _get_human_readable_timestamp(unix_timestamp):
    """Convert Unix epoch timestamp to human-readable format adjusted to GMT+7."""
    gmt7 = timezone(timedelta(hours=7))
    dt = datetime.fromtimestamp(unix_timestamp, gmt7)
    return dt.strftime('%Y-%m-%d %H:%M:%S')

def _get_current_date():
    """Return current date as a string."""
    # ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ GMT+7 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå/‡πÑ‡∏ü‡∏•‡πå ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö timestamp
    gmt7 = timezone(timedelta(hours=7))
    return datetime.now(gmt7).strftime('%Y-%m-%d')

def _get_log_folder(channel_name):
    """Return the path to the log folder, creating it if it doesn't exist."""
    # ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠ channel ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå (‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©)
    safe_channel_name = "".join(c if c.isalnum() else "_" for c in channel_name)
    log_folder = os.path.join('logged', safe_channel_name, _get_current_date())
    try:
        if not os.path.exists(log_folder):
            os.makedirs(log_folder)
            log.info(f"‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå log: {log_folder}")
    except OSError as e:
        log.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå log '{log_folder}': {e}")
        return None # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ None ‡∏ñ‡πâ‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
    return log_folder

def _get_log_filename(channel_name, log_type):
    """Generate log file name based on the current date and log type."""
    log_folder = _get_log_folder(channel_name)
    if log_folder is None:
        return None # ‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡∏Ñ‡πà‡∏≤ None ‡∏ñ‡πâ‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
    safe_channel_name = "".join(c if c.isalnum() else "_" for c in channel_name)
    return os.path.join(log_folder, f'{log_type}_log_{safe_channel_name}_{_get_current_date()}.txt')

def _get_combined_log_filename(channel_name):
    """Generate combined log file name based on the current date."""
    log_folder = _get_log_folder(channel_name)
    if log_folder is None:
        return None
    safe_channel_name = "".join(c if c.isalnum() else "_" for c in channel_name)
    return os.path.join(log_folder, f'combined_log_{safe_channel_name}_{_get_current_date()}.txt')

def _write_log(filename, message):
    """‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå log ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"""
    if filename is None:
        log.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log ‡πÑ‡∏î‡πâ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å filename ‡πÄ‡∏õ‡πá‡∏ô None")
        return
    try:
        with open(filename, 'a', encoding='utf-8') as f:
            f.write(message + '\n')
    except IOError as e:
        log.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå log '{filename}': {e}")
    except Exception as e:
        log.exception(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î‡∏Ç‡∏ì‡∏∞‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log '{filename}': {e}")

# --- ‡∏Ñ‡∏•‡∏≤‡∏™ Cog ---
class VoiceLoggingCog(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.monitored_channels = set(MONITORED_VOICE_CHANNEL_IDS) # ‡πÉ‡∏ä‡πâ set ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
        self.notification_channels = NOTIFICATION_TEXT_CHANNEL_IDS
        log.info(f"VoiceLoggingCog: ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á: {self.monitored_channels}")
        log.info(f"VoiceLoggingCog: ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: {self.notification_channels}")

    async def send_notification_embed(self, embed):
        """‡∏™‡πà‡∏á Embed ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        for channel_id in self.notification_channels:
            channel = self.bot.get_channel(channel_id)
            if channel and isinstance(channel, discord.TextChannel):
                try:
                    await channel.send(embed=embed)
                except discord.Forbidden:
                    log.warning(f"‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: {channel.name} ({channel_id})")
                except discord.HTTPException as e:
                    log.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î HTTP ‡∏Ç‡∏ì‡∏∞‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á {channel.name} ({channel_id}): {e}")
            elif not channel:
                log.warning(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ID: {channel_id}")
            else:
                 log.warning(f"ID ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô {channel_id} ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà TextChannel: {type(channel)}")


    @commands.Cog.listener()
    async def on_voice_state_update(self, member: discord.Member, before: discord.VoiceState, after: discord.VoiceState):
        """‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Ç‡∏≠‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á"""
        # ‡πÑ‡∏°‡πà‡∏™‡∏ô‡πÉ‡∏à‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≤‡∏¢‡∏ä‡πà‡∏≠‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡πâ‡∏≤ member ‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏≠‡∏ó
        if before.channel == after.channel or member.bot:
            return

        unix_timestamp = _get_unix_timestamp()
        human_readable_timestamp = _get_human_readable_timestamp(unix_timestamp)

        nickname = member.nick if member.nick else member.name
        display_name = f"{nickname} ({member.name})" if member.nick and member.nick != member.name else member.name

        log_message = None
        embed = None
        channel_involved = None # ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå log

        # --- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ---
        if after.channel is not None and after.channel.id in self.monitored_channels:
            channel_involved = after.channel
            if before.channel is None: # ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° Discord ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
                log_message = f'{human_readable_timestamp} üëã {display_name} joined {after.channel.name}'
                title = "Member Joined Voice Channel"
                description = f"üëã {member.mention} joined **{after.channel.name}**"
                embed_color = discord.Color.green()
                footer_text = "Joined"
            elif before.channel.id not in self.monitored_channels: # ‡∏¢‡πâ‡∏≤‡∏¢‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
                log_message = f'{human_readable_timestamp} ‚û°Ô∏è {display_name} moved into {after.channel.name} (from {before.channel.name})'
                title = "Member Entered Monitored Channel"
                description = f"‚û°Ô∏è {member.mention} entered **{after.channel.name}** (from {before.channel.name})"
                embed_color = discord.Color.blue() # ‡∏™‡∏µ‡∏ü‡πâ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
                footer_text = "Entered"
            else: # ‡∏¢‡πâ‡∏≤‡∏¢‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
                log_message = f'‚úàÔ∏è {human_readable_timestamp} {display_name} moved from {before.channel.name} to {after.channel.name}'
                title = "Member Moved Between Monitored Channels"
                description = f"‚úàÔ∏è {member.mention} moved from **{before.channel.name}** to **{after.channel.name}**"
                embed_color = discord.Color.purple() # ‡∏™‡∏µ‡∏°‡πà‡∏ß‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≤‡∏¢‡∏†‡∏≤‡∏¢‡πÉ‡∏ô
                footer_text = "Moved (Internal)"

        # --- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ---
        elif before.channel is not None and before.channel.id in self.monitored_channels:
            channel_involved = before.channel
            if after.channel is None: # ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Discord ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
                log_message = f'{human_readable_timestamp} üö™ {display_name} left {before.channel.name}'
                title = "Member Left Voice Channel"
                description = f"üö™ {member.mention} left **{before.channel.name}**"
                embed_color = discord.Color.red()
                footer_text = "Left"
            elif after.channel.id not in self.monitored_channels: # ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
                 log_message = f'{human_readable_timestamp} ‚¨ÖÔ∏è {display_name} moved out of {before.channel.name} (to {after.channel.name})'
                 title = "Member Left Monitored Channel"
                 description = f"‚¨ÖÔ∏è {member.mention} left **{before.channel.name}** (to {after.channel.name})"
                 embed_color = discord.Color.orange() # ‡∏™‡∏µ‡∏™‡πâ‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ
                 footer_text = "Exited"
            # ‡∏Å‡∏£‡∏ì‡∏µ ‡∏¢‡πâ‡∏≤‡∏¢‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÅ‡∏£‡∏Å‡πÅ‡∏•‡πâ‡∏ß

        # --- ‡∏™‡∏£‡πâ‡∏≤‡∏á Log ‡πÅ‡∏•‡∏∞ Embed ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á ---
        if log_message and channel_involved:
            log.info(log_message) # ‡πÉ‡∏ä‡πâ logger ‡πÅ‡∏ó‡∏ô print

            # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô Log (‡πÅ‡∏¢‡∏Å join/leave ‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏° ‡πÅ‡∏ï‡πà‡πÉ‡∏ä‡πâ log_message ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô)
            log_type = 'join' if after.channel == channel_involved else 'leave'
            individual_log_filename = _get_log_filename(channel_involved.name, log_type)
            _write_log(individual_log_filename, log_message)

            # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô Log ‡∏£‡∏ß‡∏°
            combined_log_filename = _get_combined_log_filename(channel_involved.name)
            _write_log(combined_log_filename, log_message)

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á Embed
            embed = discord.Embed(
                title=title,
                description=description,
                color=embed_color,
                timestamp=datetime.fromtimestamp(unix_timestamp, tz=timezone.utc) # ‡πÉ‡∏ä‡πâ UTC ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö timestamp ‡πÉ‡∏ô embed
            )
            embed.set_author(
                name=display_name,
                icon_url=member.display_avatar.url # ‡πÉ‡∏ä‡πâ display_avatar ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö avatar ‡∏õ‡∏£‡∏∞‡∏à‡∏≥ server
            )
            embed.set_footer(text=f"{footer_text} ‚Ä¢ Channel ID: {channel_involved.id}") # ‡πÄ‡∏û‡∏¥‡πà‡∏° ID ‡∏ä‡πà‡∏≠‡∏á‡πÉ‡∏ô footer
            embed.add_field(name="User ID", value=member.id, inline=False)

            # ‡∏™‡πà‡∏á Embed ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
            await self.send_notification_embed(embed)


# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Setup ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Cog ---
# ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô async function ‡∏ä‡∏∑‡πà‡∏≠ setup ‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö bot instance
async def setup(bot: commands.Bot):
    """Loads the VoiceLoggingCog."""
    try:
        await bot.add_cog(VoiceLoggingCog(bot))
        log.info("VoiceLoggingCog: Setup complete, Cog added to bot.")
    except Exception as e:
        log.exception("VoiceLoggingCog: Failed to load Cog.") # ‡πÉ‡∏ä‡πâ log.exception ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π traceback
        # ‡∏≠‡∏≤‡∏à‡∏à‡∏∞ raise ‡∏ã‡πâ‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ bot ‡∏´‡∏•‡∏±‡∏Å‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        # raise e
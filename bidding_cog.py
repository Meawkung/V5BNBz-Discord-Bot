# bidding_cog.py
import discord
from discord.ext import commands
from discord.ui import Button, View, Select
import asyncio
import time
import logging
import os # <<< ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå
from typing import Dict, List, Optional # ‡πÄ‡∏û‡∏¥‡πà‡∏° type hinting

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logger ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Cog ‡∏ô‡∏µ‡πâ
log = logging.getLogger(__name__)

# --- ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà ---
# ‡∏¢‡πâ‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏°‡∏≤‡πÑ‡∏ß‡πâ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
BIDDING_CARDS: List[str] = [
    "Deviling Puppet II", "Drake Puppet II", "Eddga Puppet II", "Phreeoni Puppet II",
    "Goblin Leader Puppet II", "Doppelganger Puppet II", "Angeling Puppet II",
    "Moonlight Flower Puppet II", "Golden Thief Bug Puppet II", "Baphomet Puppet II"
]
# ID ‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏• (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏õ‡πá‡∏ô ID ‡∏ä‡πà‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)
BIDDING_CHANNEL_ID = 1288876995836510322 # <<< ‡πÉ‡∏™‡πà ID ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
GUIDE_FILENAME = "bidding_guide.txt" # <<< ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠

# --- ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏• ---
# card_name -> list of bids
# bid = {'user_id': int, 'user_mention': str, 'user_display_name': str, 'quantity': int, 'timestamp': int, 'done': bool}
BiddingDataType = Dict[str, List[Dict[str, any]]]

# --- ‡∏Ñ‡∏•‡∏≤‡∏™ UI Components (Buttons, Select, View) ---

class CardButton(Button):
    def __init__(self, card_label: str, cog_instance): # ‡∏£‡∏±‡∏ö instance ‡∏Ç‡∏≠‡∏á Cog ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á custom_id ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏Ñ‡∏á‡∏ó‡∏µ‡πà
        safe_label = "".join(c for c in card_label if c.isalnum()) # ‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£/‡πÄ‡∏•‡∏Ç
        super().__init__(label=card_label, style=discord.ButtonStyle.secondary, custom_id=f"bid_card_{safe_label[:50]}") # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß custom_id
        self.card_label = card_label
        self.cog = cog_instance # ‡πÄ‡∏Å‡πá‡∏ö reference Cog ‡πÑ‡∏ß‡πâ

    async def callback(self, interaction: discord.Interaction):
        await interaction.response.defer() # Defer ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô timeout
        user = interaction.user
        current_timestamp = int(time.time())
        await self.cog.add_or_update_bid(self.card_label, user, current_timestamp)
        # ‡∏™‡πà‡∏á View ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
        await self.cog.update_bidding_message(interaction=interaction, view=self.view, is_interaction_edit=True)


class ClearBidsButton(Button):
    def __init__(self, cog_instance):
        super().__init__(label="Clear My Bids", style=discord.ButtonStyle.primary, custom_id="bid_clear_my")
        self.cog = cog_instance

    async def callback(self, interaction: discord.Interaction):
        await interaction.response.defer()
        user = interaction.user
        await self.cog.clear_user_bids(user)
        await self.cog.update_bidding_message(interaction=interaction, view=self.view, is_interaction_edit=True)


class DoneBiddingButton(Button):
    def __init__(self, cog_instance):
        super().__init__(label="Done Bidding", style=discord.ButtonStyle.success, custom_id="bid_done")
        self.cog = cog_instance

    async def callback(self, interaction: discord.Interaction):
        user = interaction.user
        # ‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ó‡∏µ‡πà user ‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡∏∞ *‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà* ‡∏Å‡∏î done
        user_bids_cards = self.cog.get_user_active_bid_cards(user)

        if not user_bids_cards:
            await interaction.response.send_message("You don't have any active bids to mark as done.", ephemeral=True)
            return

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Select Menu ‡πÉ‡∏ô callback ‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡∏¢
        options = [discord.SelectOption(label=card, value=card) for card in user_bids_cards]
        # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô option ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏ô 25 (‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏≠‡∏á Discord)
        if len(options) > 25:
             await interaction.response.send_message("You have too many active bids (>25) to display in a selection menu. Please clear some bids first.", ephemeral=True)
             return

        select = Select(
            placeholder="Select card(s) to mark as Done",
            min_values=1,
            max_values=min(len(options), 25), # ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô option ‡∏ó‡∏µ‡πà‡∏°‡∏µ ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 25
            options=options,
            custom_id="bid_done_select" # custom_id ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö select
        )

        async def select_callback(select_interaction: discord.Interaction):
            # Important: Defer the response to the select interaction
            await select_interaction.response.defer(ephemeral=True) # Defer ‡πÅ‡∏ö‡∏ö ephemeral
            selected_cards = select_interaction.data.get('values', [])
            await self.cog.mark_bids_done(user, selected_cards)

            # Send confirmation via followup for the select interaction
            await select_interaction.followup.send(f"Marked bids for {', '.join(selected_cards)} as done. Please refresh the main message if needed.", ephemeral=True)

            # --- ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å ---
            # ‡∏´‡∏≤ View ‡∏´‡∏•‡∏±‡∏Å (view ‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏° Done Bidding) ‡∏à‡∏≤‡∏Å interaction ‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏°
            original_view = self.view
            try:
                # ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° fetch ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å‡∏°‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡∏Å‡∏ß‡πà‡∏≤ interaction ‡πÄ‡∏î‡∏¥‡∏°)
                await self.cog.update_bidding_message(view=original_view, is_interaction_edit=False)
            except Exception as e:
                log.warning(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏´‡∏•‡∏±‡∏á 'Done': {e}")


        select.callback = select_callback
        view = View(timeout=180) # View ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Select ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        view.add_item(select)
        # ‡∏™‡πà‡∏á Select menu ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏≤‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Done
        await interaction.response.send_message("Choose the card(s) to mark as Done:", view=view, ephemeral=True)


class RestartButton(Button):
    def __init__(self, cog_instance):
        super().__init__(label="Restart Bidding", style=discord.ButtonStyle.danger, custom_id="bid_restart")
        self.cog = cog_instance

    async def callback(self, interaction: discord.Interaction):
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message("You do not have permission to restart bidding.", ephemeral=True)
            return
        await interaction.response.defer() # Defer ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        await self.cog.restart_bidding()
        # ‡∏™‡πà‡∏á view ‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Å‡∏≤‡∏£ restart ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á view ‡πÉ‡∏´‡∏°‡πà (‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ view ‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πá‡πÑ‡∏î‡πâ‡∏ñ‡πâ‡∏≤‡∏õ‡∏∏‡πà‡∏°‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô)
        await self.cog.update_bidding_message(interaction=interaction, view=self.view, is_restart=True, is_interaction_edit=True)


class RefreshButton(Button):
    def __init__(self, cog_instance):
        super().__init__(label="üîÉ", style=discord.ButtonStyle.secondary, custom_id="bid_refresh")
        self.cog = cog_instance

    async def callback(self, interaction: discord.Interaction):
        await interaction.response.defer()
        # ‡πÅ‡∏Ñ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        await self.cog.update_bidding_message(interaction=interaction, view=self.view, is_interaction_edit=True)


class BiddingView(View):
    # ‡∏ó‡∏≥‡πÉ‡∏´‡πâ View ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢ ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏∏‡πà‡∏°‡∏ï‡πà‡∏≤‡∏á‡πÜ
    def __init__(self, cog_instance, timeout=None): # ‡∏£‡∏±‡∏ö Cog instance
        super().__init__(timeout=timeout)
        self.cog = cog_instance # ‡πÄ‡∏Å‡πá‡∏ö cog instance ‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ button ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏° Refresh ‡∏Å‡πà‡∏≠‡∏ô (‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÑ‡∏ß‡πâ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å)
        self.add_item(RefreshButton(cog_instance=self.cog))

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏≤‡∏£‡πå‡∏î (‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ñ‡∏ß‡∏ñ‡πâ‡∏≤‡πÄ‡∏¢‡∏≠‡∏∞)
        # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡πÅ‡∏ö‡πà‡∏á 5 ‡∏õ‡∏∏‡πà‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏ñ‡∏ß
        row_num = 0
        for i, card in enumerate(BIDDING_CARDS):
             # Discord ‡∏à‡∏≥‡∏Å‡∏±‡∏î 5 ‡∏õ‡∏∏‡πà‡∏°‡∏ï‡πà‡∏≠ 1 ‡πÅ‡∏ñ‡∏ß (Row)
             # ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Row ‡πÅ‡∏ö‡∏ö Dynamic ‡∏≠‡∏≤‡∏à‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô, ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡∏Ñ‡∏∑‡∏≠‡πÉ‡∏™‡πà‡∏õ‡∏∏‡πà‡∏°‡πÑ‡∏õ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢‡πÜ View ‡∏à‡∏∞‡∏à‡∏±‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏á
             self.add_item(CardButton(card_label=card, cog_instance=self.cog))
             # if i > 0 and i % 5 == 0: # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏ñ‡∏ß‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å 5 ‡∏õ‡∏∏‡πà‡∏° (‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô View ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ)
             #    row_num += 1

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ (‡∏Ñ‡∏ß‡∏£‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß‡πÉ‡∏´‡∏°‡πà ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
        # View ‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏ï‡πà‡∏≠‡∏à‡∏≤‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏≤‡∏£‡πå‡∏î
        self.add_item(ClearBidsButton(cog_instance=self.cog))
        self.add_item(DoneBiddingButton(cog_instance=self.cog))
        self.add_item(RestartButton(cog_instance=self.cog))

# --- ‡∏Ñ‡∏•‡∏≤‡∏™ Cog ‡∏´‡∏•‡∏±‡∏Å ---
class BiddingCog(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
        # TODO: Implement loading/saving bid data from a file/database
        self.card_bids: BiddingDataType = {card: [] for card in BIDDING_CARDS}
        self.card_bid_order: List[str] = [] # ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
        # ‡πÇ‡∏´‡∏•‡∏î ID ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        # TODO: Implement loading/saving bidding_message_id
        self.bidding_message_id: Optional[int] = None
        self.bidding_channel_id: int = BIDDING_CHANNEL_ID
        self.persistent_view_added = False # Flag ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£ add view ‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô
        self.message_lock = asyncio.Lock() # Lock ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô race condition ‡∏ï‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        log.info(f"BiddingCog: ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡πà‡∏≠‡∏á ID: {self.bidding_channel_id}")

    # --- Listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö View ‡πÅ‡∏ö‡∏ö‡∏ñ‡∏≤‡∏ß‡∏£ ---
    @commands.Cog.listener()
    async def on_ready(self):
        # ‡∏ó‡∏≥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏≠‡∏≤‡∏à‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á)
        if not self.persistent_view_added:
             log.info("BiddingCog: on_ready - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö/‡πÄ‡∏û‡∏¥‡πà‡∏° Persistent View...")
             # ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡∏Ç‡∏≠‡∏á View ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡∏•‡∏≠‡∏î
             persistent_view = BiddingView(cog_instance=self, timeout=None)
             # ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô View ‡∏Å‡∏±‡∏ö‡∏ö‡∏≠‡∏ó; ‡∏ö‡∏≠‡∏ó‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ callback ‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ custom_id ‡πÉ‡∏ô View ‡∏ô‡∏µ‡πâ
             self.bot.add_view(persistent_view)
             self.persistent_view_added = True
             log.info("BiddingCog: Persistent View ‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß")
             # TODO: ‡πÇ‡∏´‡∏•‡∏î bidding_message_id ‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
             # self.bidding_message_id = load_saved_message_id()
             if self.bidding_message_id:
                  log.info(f"‡∏û‡∏ö Bidding Message ID ‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ: {self.bidding_message_id}")
                  # ‡∏≠‡∏≤‡∏à‡∏à‡∏∞ fetch ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï view ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
             else:
                  log.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö Bidding Message ID ‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ. ‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ !startbidding ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà")


    # --- Command ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°/‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏• ---
    @commands.command(name="startbidding")
    @commands.has_permissions(administrator=True) # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÉ‡∏´‡πâ Admin ‡πÉ‡∏ä‡πâ
    @commands.guild_only() # ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô Server
    async def start_bidding(self, ctx: commands.Context, channel: Optional[discord.TextChannel] = None):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏ (Admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)"""
        target_channel = channel or ctx.guild.get_channel(self.bidding_channel_id) or ctx.channel
        if not target_channel or not isinstance(target_channel, discord.TextChannel):
            await ctx.send("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•", ephemeral=True)
            return

        # --- ‡∏≠‡πà‡∏≤‡∏ô User Guide ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå ---
        user_guide = self._get_user_guide() # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß
        # -----------------------------
        if "# Error" in user_guide: # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏´‡∏•‡∏î guide ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÑ‡∏´‡∏°
             await ctx.send(f"‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î User Guide ‡πÑ‡∏î‡πâ\n{user_guide}", ephemeral=True)
             # ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ñ‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≠‡πÑ‡∏´‡∏°
             # view_confirm = ConfirmView(ctx.author.id)
             # await ctx.send("Proceed without user guide?", view=view_confirm, ephemeral=True)
             # await view_confirm.wait()
             # if not view_confirm.confirmed: return

        try:
            await target_channel.send(user_guide)
        except discord.Forbidden:
             await ctx.send(f"‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° User Guide ‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á {target_channel.mention}", ephemeral=True)
             return
        except discord.HTTPException as e:
            await ctx.send(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á User Guide: {e}", ephemeral=True)
            # ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏´‡∏¢‡∏∏‡∏î‡∏ñ‡πâ‡∏≤‡∏™‡πà‡∏á guide ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á View ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å
        # ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á View instance ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
        view = BiddingView(cog_instance=self, timeout=None) # View ‡πÅ‡∏ö‡∏ö‡∏ñ‡∏≤‡∏ß‡∏£
        initial_content = "Choose a card to bid on:"
        try:
            msg = await target_channel.send(initial_content, view=view)
            # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡πà‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ID ‡πÄ‡∏î‡∏¥‡∏°) - Optional
            if self.bidding_message_id:
                 try:
                     old_msg = await target_channel.fetch_message(self.bidding_message_id)
                     await old_msg.delete()
                     log.info(f"‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤ ID: {self.bidding_message_id}")
                 except discord.NotFound:
                     log.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö")
                 except discord.Forbidden:
                     log.warning("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤")
                 except Exception as e:
                     log.warning(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡πà‡∏≤: {e}")

            self.bidding_message_id = msg.id # <<< ‡πÄ‡∏Å‡πá‡∏ö ID ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
            log.info(f"‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà ID: {self.bidding_message_id} ‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á {target_channel.id}")
            # TODO: ‡∏Ñ‡∏ß‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å bidding_message_id ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå/‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏ì ‡∏à‡∏∏‡∏î‡∏ô‡∏µ‡πâ
            # save_message_id(self.bidding_message_id)
            await ctx.send(f"‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÉ‡∏ô {target_channel.mention} (ID: {msg.id})", ephemeral=True)
        except discord.Forbidden:
             await ctx.send(f"‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏° View ‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á {target_channel.mention}", ephemeral=True)
        except discord.HTTPException as e:
            log.exception(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î HTTP ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å: {e}")
            await ctx.send(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å: {e}", ephemeral=True)
        except Exception as e:
            log.exception(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å: {e}")
            await ctx.send(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î: {e}", ephemeral=True)


    def _get_user_guide(self) -> str:
        """‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ User Guide ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå GUIDE_FILENAME"""
        default_error_message = "# Error\nCould not load the user guide."
        try:
            script_dir = os.path.dirname(__file__)
            file_path = os.path.join(script_dir, GUIDE_FILENAME)

            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            if not content.strip():
                 log.warning(f"‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠ '{file_path}' ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤")
                 return f"# Warning\nUser guide file '{GUIDE_FILENAME}' is empty."
            log.info(f"‡πÇ‡∏´‡∏•‡∏î User Guide ‡∏à‡∏≤‡∏Å '{file_path}' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            return content
        except FileNotFoundError:
            log.error(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠ '{file_path}' ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ")
            return f"# Error\nCould not load user guide: File '{GUIDE_FILENAME}' not found at expected location '{file_path}'."
        except IOError as e:
            log.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î IO ‡∏Ç‡∏ì‡∏∞‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠ '{file_path}': {e}")
            return f"# Error\nCould not read user guide file '{GUIDE_FILENAME}': {e}"
        except Exception as e:
             log.exception(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î‡∏Ç‡∏ì‡∏∞‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠ '{file_path}': {e}")
             return default_error_message


    # --- Methods ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏• ---
    async def add_or_update_bid(self, card_label: str, user: discord.User | discord.Member, timestamp: int):
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏"""
        async with self.message_lock: # ‡∏•‡πá‡∏≠‡∏Ñ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• bid
            if card_label not in self.card_bids:
                log.warning(f"‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å: {card_label}")
                return

            bids_for_card = self.card_bids[card_label]
            user_id = user.id
            # ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏î‡∏∂‡∏á Member object ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏≤ Nickname (‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ñ‡πâ‡∏≤ interaction ‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏ô‡∏≠‡∏Å Guild ‡∏´‡∏£‡∏∑‡∏≠ Member ‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß)
            display_name = user.display_name # ‡πÉ‡∏ä‡πâ display_name ‡∏ã‡∏∂‡πà‡∏á‡∏à‡∏∞ fallback ‡πÑ‡∏õ‡πÄ‡∏õ‡πá‡∏ô global name ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ nick

            existing_bid_index = next((i for i, bid in enumerate(bids_for_card) if bid['user_id'] == user_id), -1)

            if existing_bid_index != -1:
                bids_for_card[existing_bid_index]['quantity'] += 1
                bids_for_card[existing_bid_index]['timestamp'] = timestamp
                bids_for_card[existing_bid_index]['done'] = False # ‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà done
                log.info(f"‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•: {display_name} ({user_id}) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {card_label} ‡πÄ‡∏õ‡πá‡∏ô {bids_for_card[existing_bid_index]['quantity']}")
            else:
                new_bid = {
                    'user_id': user_id,
                    'user_mention': user.mention,
                    'user_display_name': display_name,
                    'quantity': 1,
                    'timestamp': timestamp,
                    'done': False
                }
                bids_for_card.append(new_bid)
                log.info(f"‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà: {display_name} ({user_id}) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {card_label} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô 1")
                if card_label not in self.card_bid_order:
                    self.card_bid_order.append(card_label)
            # TODO: Save bid data after modification
            # self.save_bid_data()

    async def clear_user_bids(self, user: discord.User):
        """‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏"""
        async with self.message_lock: # ‡∏•‡πá‡∏≠‡∏Ñ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            user_id = user.id
            cleared_count = 0
            cards_to_check = list(self.card_bids.keys())

            for card in cards_to_check:
                initial_len = len(self.card_bids[card])
                self.card_bids[card] = [bid for bid in self.card_bids[card] if bid['user_id'] != user_id]
                cleared_in_card = initial_len - len(self.card_bids[card])
                if cleared_in_card > 0:
                    cleared_count += cleared_in_card
                    log.info(f"‡∏•‡∏ö {cleared_in_card} bid ‡∏Ç‡∏≠‡∏á {user.display_name} ({user_id}) ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å {card}")
                    if not self.card_bids[card] and card in self.card_bid_order:
                        try:
                            self.card_bid_order.remove(card)
                            log.info(f"‡∏ô‡∏≥ {card} ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ bid ‡πÄ‡∏´‡∏•‡∏∑‡∏≠")
                        except ValueError: pass

            if cleared_count > 0:
                log.info(f"‡∏£‡∏ß‡∏°‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏• {cleared_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: {user.display_name} ({user_id})")
                # TODO: Save bid data
                # self.save_bid_data()
            else:
                 log.info(f"‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ {user.display_name} ({user_id}) ‡πÑ‡∏°‡πà‡∏°‡∏µ bid ‡πÉ‡∏´‡πâ‡∏•‡∏ö")


    def get_user_active_bid_cards(self, user: discord.User) -> List[str]:
        """‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà 'done' """
        user_id = user.id
        # ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ lock ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÅ‡∏Ñ‡πà ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        return [card for card, bids in self.card_bids.items() if any(bid['user_id'] == user_id and not bid.get('done', False) for bid in bids)]

    async def mark_bids_done(self, user: discord.User, cards_to_mark: List[str]):
        """‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô 'done'"""
        async with self.message_lock: # ‡∏•‡πá‡∏≠‡∏Ñ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
            user_id = user.id
            marked_count = 0
            display_name = user.display_name
            for card in cards_to_mark:
                if card in self.card_bids:
                    for bid in self.card_bids[card]:
                        # ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞ bid ‡∏Ç‡∏≠‡∏á user ‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô done
                        if bid['user_id'] == user_id and not bid.get('done', False):
                            bid['done'] = True
                            marked_count += 1
            if marked_count > 0:
                log.info(f"‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ {marked_count} ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô 'done' ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {display_name} ({user_id}) ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πå‡∏î: {', '.join(cards_to_mark)}")
                # TODO: Save bid data
                # self.save_bid_data()
            else:
                 log.info(f"‡πÑ‡∏°‡πà‡∏û‡∏ö bid ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà done ‡∏Ç‡∏≠‡∏á {display_name} ({user_id}) ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: {', '.join(cards_to_mark)}")


    async def restart_bidding(self):
        """‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        async with self.message_lock: # ‡∏•‡πá‡∏≠‡∏Ñ‡∏Ç‡∏ì‡∏∞‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
            self.card_bids = {card: [] for card in BIDDING_CARDS}
            self.card_bid_order = []
            # ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏ö bidding_message_id ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°
            log.info("--- ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥) ---")
            # TODO: Clear saved bid data
            # self.clear_saved_bid_data()


    # --- Method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏• ---
    async def update_bidding_message(self, interaction: Optional[discord.Interaction] = None, view: Optional[View] = None, msg_to_edit: Optional[discord.Message] = None, is_restart: bool = False, is_interaction_edit: bool = True):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å (Thread-safe)"""
        # ‡πÉ‡∏ä‡πâ Lock ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏ã‡∏∂‡πà‡∏á‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
        async with self.message_lock:
            log.debug(f"Update message triggered by: {'Interaction' if interaction else 'Direct Call'}{' (Restart)' if is_restart else ''}")
            if is_restart:
                new_content = "Bidding has been restarted. Choose a card to bid on:"
            else:
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• bid ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô lock ‡πÅ‡∏•‡πâ‡∏ß)
                active_bids_data = {card: bids for card, bids in self.card_bids.items() if bids}
                if not active_bids_data:
                    new_content = "No current bids."
                else:
                    # ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î
                    def sort_key(card_name):
                        try: order_index = self.card_bid_order.index(card_name)
                        except ValueError: order_index = float('inf')
                        return (-len(self.card_bids.get(card_name, [])), order_index)

                    sorted_cards = sorted(active_bids_data.keys(), key=sort_key)
                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
                    lines = []
                    for card in sorted_cards:
                        bids = active_bids_data[card]
                        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á bid ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ï‡∏≤‡∏° timestamp
                        sorted_bids = sorted(bids, key=lambda b: b.get('timestamp', 0))
                        bid_lines = [
                            (f"{idx + 1}. {bid.get('user_mention', 'Unknown User')} "
                             f"({bid.get('user_display_name', '?')}) - {bid.get('quantity', '?')} "
                             f"<t:{bid.get('timestamp', 0)}:R> {'‚úÖ' if bid.get('done', False) else ''}").strip()
                            for idx, bid in enumerate(sorted_bids)
                        ]
                        lines.append(f"# **{card}**:\n" + "\n".join(bid_lines))
                    new_content = "\n\n".join(lines)
                    # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏ô 4000 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ (‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏≠‡∏á Discord Embed Description ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á content)
                    if len(new_content) > 4000:
                         new_content = new_content[:3950] + "\n... (Message too long, truncated)"
                         log.warning("‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏™‡∏±‡πâ‡∏ô‡∏•‡∏á")


            # ‡∏´‡∏≤ view ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏°‡∏≤ ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ view ‡∏à‡∏≤‡∏Å interaction/message)
            current_view = view
            if not current_view:
                 if interaction and interaction.message:
                      current_view = View.from_message(interaction.message) # ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÉ‡∏ä‡πâ View ‡πÄ‡∏î‡∏¥‡∏°‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á interaction
                 elif msg_to_edit:
                      current_view = View.from_message(msg_to_edit) # ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÉ‡∏ä‡πâ View ‡πÄ‡∏î‡∏¥‡∏°‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
                 else:
                     # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡∏Ñ‡πà‡∏≠‡∏¢‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà (‡πÅ‡∏ï‡πà‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏° state ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏î‡∏µ‡πÜ)
                     log.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö View ‡πÄ‡∏î‡∏¥‡∏° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á BiddingView ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö update_bidding_message")
                     current_view = BiddingView(cog_instance=self, timeout=None)


            # --- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ---
            message_edited = False
            target_message_id = self.bidding_message_id # ‡πÉ‡∏ä‡πâ ID ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å
            edit_target = None

            if interaction and is_interaction_edit:
                # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ interaction ‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ú‡πà‡∏≤‡∏ô interaction
                edit_target = interaction
                log.debug(f"‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ú‡πà‡∏≤‡∏ô Interaction: {interaction.id}")
            elif msg_to_edit:
                 # ‡∏ñ‡πâ‡∏≤‡∏™‡πà‡∏á message object ‡∏°‡∏≤‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                 edit_target = msg_to_edit
                 target_message_id = msg_to_edit.id
                 log.debug(f"‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ú‡πà‡∏≤‡∏ô Message object: {msg_to_edit.id}")
            elif target_message_id:
                 # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ interaction/message ‡πÅ‡∏ï‡πà‡∏°‡∏µ ID ‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
                 log.debug(f"‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ú‡πà‡∏≤‡∏ô Message ID ‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ: {target_message_id}")
                 # ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ ‡∏à‡∏∞‡πÑ‡∏õ fetch ‡πÉ‡∏ô try ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
                 pass
            else:
                 log.warning("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ: ‡πÑ‡∏°‡πà‡∏°‡∏µ Interaction, Message ‡∏´‡∏£‡∏∑‡∏≠ Message ID ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç")
                 return # ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢

            # --- ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ---
            try:
                if isinstance(edit_target, discord.Interaction):
                    await edit_target.edit_original_response(content=new_content, view=current_view)
                    message_edited = True
                    log.info(f"‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏ú‡πà‡∏≤‡∏ô Interaction {edit_target.id} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                elif isinstance(edit_target, discord.Message):
                    await edit_target.edit(content=new_content, view=current_view)
                    message_edited = True
                    log.info(f"‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏ú‡πà‡∏≤‡∏ô Message {edit_target.id} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                elif target_message_id: # ‡∏Å‡∏£‡∏ì‡∏µ‡∏ï‡πâ‡∏≠‡∏á fetch
                    channel = self.bot.get_channel(self.bidding_channel_id) or await self.bot.fetch_channel(self.bidding_channel_id)
                    if channel and isinstance(channel, discord.TextChannel):
                        msg = await channel.fetch_message(target_message_id)
                        await msg.edit(content=new_content, view=current_view)
                        message_edited = True
                        log.info(f"‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏ú‡πà‡∏≤‡∏ô fetch ID {target_message_id} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                    elif not channel:
                         log.error(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡πà‡∏≠‡∏á ID {self.bidding_channel_id} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö fetch message")
                    else:
                         log.error(f"‡∏ä‡πà‡∏≠‡∏á ID {self.bidding_channel_id} ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà TextChannel")

            except discord.NotFound:
                log.error(f"‡πÑ‡∏°‡πà‡∏û‡∏ö Interaction ‡∏´‡∏£‡∏∑‡∏≠ Message (ID: {target_message_id}) ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡∏≠‡∏≤‡∏à‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß")
                # ‡∏ñ‡πâ‡∏≤‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå ID ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ
                if target_message_id and target_message_id == self.bidding_message_id:
                    self.bidding_message_id = None
                    # TODO: Clear saved message ID
                    # clear_saved_message_id()
                    log.warning("Bidding Message ID ‡∏ñ‡∏π‡∏Å‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°")
            except discord.HTTPException as e:
                # ‡∏ö‡πà‡∏≠‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡∏∑‡∏≠ Rate Limit ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÑ‡∏õ (‡πÅ‡∏°‡πâ‡∏à‡∏∞‡πÄ‡∏ä‡πá‡∏Ñ‡πÅ‡∏•‡πâ‡∏ß) ‡∏´‡∏£‡∏∑‡∏≠ permission
                log.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î HTTP ‡∏Ç‡∏ì‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏• (ID: {target_message_id}): {e.status} - {e.text}")
            except Exception as e:
                log.exception(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î‡∏Ç‡∏ì‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏• (ID: {target_message_id}): {e}")

            if not message_edited:
                log.warning("‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")


# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Setup ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Cog ---
async def setup(bot: commands.Bot):
    """Loads the BiddingCog."""
    try:
        # ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô add cog
        # saved_data = load_bid_data()
        # saved_msg_id = load_saved_message_id()
        cog_instance = BiddingCog(bot)
        # if saved_data: cog_instance.card_bids = saved_data['bids']; cog_instance.card_bid_order = saved_data['order']
        # if saved_msg_id: cog_instance.bidding_message_id = saved_msg_id
        await bot.add_cog(cog_instance)
        log.info("BiddingCog: Setup complete, Cog added to bot.")
    except Exception as e:
        log.exception("BiddingCog: Failed to load Cog.")
        # raise e # ‡∏≠‡∏≤‡∏à‡∏à‡∏∞ raise ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ bot ‡∏´‡∏•‡∏±‡∏Å‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à

# --- todo: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Save/Load Data (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡∏Å‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå JSON) ---
# import json
# BID_DATA_FILE = 'bidding_data.json'

# def save_bid_data(self): # ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô method ‡πÉ‡∏ô Cog
#     async with self.message_lock: # ‡πÉ‡∏ä‡πâ lock ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
#         data_to_save = {
#             'bids': self.card_bids,
#             'order': self.card_bid_order,
#             'message_id': self.bidding_message_id
#         }
#         try:
#             with open(BID_DATA_FILE, 'w', encoding='utf-8') as f:
#                 json.dump(data_to_save, f, ensure_ascii=False, indent=4)
#             log.info(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏•‡∏á {BID_DATA_FILE} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
#         except IOError as e:
#             log.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏•‡∏á {BID_DATA_FILE}: {e}")
#         except Exception as e:
#             log.exception(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")

# def load_bid_data(self): # ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô method ‡πÉ‡∏ô Cog ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ô __init__ / setup
#     try:
#         if os.path.exists(BID_DATA_FILE):
#             with open(BID_DATA_FILE, 'r', encoding='utf-8') as f:
#                 loaded_data = json.load(f)
#                 self.card_bids = loaded_data.get('bids', {card: [] for card in BIDDING_CARDS})
#                 self.card_bid_order = loaded_data.get('order', [])
#                 self.bidding_message_id = loaded_data.get('message_id', None)
#                 log.info(f"‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å {BID_DATA_FILE} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
#         else:
#              log.info(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå {BID_DATA_FILE}, ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡πà‡∏≤‡∏á")
#     except json.JSONDecodeError:
#          log.error(f"‡πÑ‡∏ü‡∏•‡πå {BID_DATA_FILE} ‡∏°‡∏µ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á, ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡πà‡∏≤‡∏á")
#     except Exception as e:
#          log.exception(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")